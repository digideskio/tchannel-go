// generated by jsonenums -type=ToS; DO NOT EDIT

package tos

import (
	"encoding/json"
	"fmt"
)

var (
	_ToSNameToValue = map[string]ToS{
		"CS3":         CS3,
		"CS4":         CS4,
		"CS5":         CS5,
		"CS6":         CS6,
		"CS7":         CS7,
		"AF11":        AF11,
		"AF12":        AF12,
		"AF13":        AF13,
		"AF21":        AF21,
		"AF22":        AF22,
		"AF23":        AF23,
		"AF31":        AF31,
		"AF32":        AF32,
		"AF33":        AF33,
		"AF41":        AF41,
		"AF42":        AF42,
		"AF43":        AF43,
		"EF":          EF,
		"Lowdelay":    Lowdelay,
		"Throughput":  Throughput,
		"Reliability": Reliability,
		"Lowcost":     Lowcost,
	}

	_ToSValueToName = map[ToS]string{
		CS3:         "CS3",
		CS4:         "CS4",
		CS5:         "CS5",
		CS6:         "CS6",
		CS7:         "CS7",
		AF11:        "AF11",
		AF12:        "AF12",
		AF13:        "AF13",
		AF21:        "AF21",
		AF22:        "AF22",
		AF23:        "AF23",
		AF31:        "AF31",
		AF32:        "AF32",
		AF33:        "AF33",
		AF41:        "AF41",
		AF42:        "AF42",
		AF43:        "AF43",
		EF:          "EF",
		Lowdelay:    "Lowdelay",
		Throughput:  "Throughput",
		Reliability: "Reliability",
		Lowcost:     "Lowcost",
	}
)

func init() {
	var v ToS
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ToSNameToValue = map[string]ToS{
			interface{}(CS3).(fmt.Stringer).String():         CS3,
			interface{}(CS4).(fmt.Stringer).String():         CS4,
			interface{}(CS5).(fmt.Stringer).String():         CS5,
			interface{}(CS6).(fmt.Stringer).String():         CS6,
			interface{}(CS7).(fmt.Stringer).String():         CS7,
			interface{}(AF11).(fmt.Stringer).String():        AF11,
			interface{}(AF12).(fmt.Stringer).String():        AF12,
			interface{}(AF13).(fmt.Stringer).String():        AF13,
			interface{}(AF21).(fmt.Stringer).String():        AF21,
			interface{}(AF22).(fmt.Stringer).String():        AF22,
			interface{}(AF23).(fmt.Stringer).String():        AF23,
			interface{}(AF31).(fmt.Stringer).String():        AF31,
			interface{}(AF32).(fmt.Stringer).String():        AF32,
			interface{}(AF33).(fmt.Stringer).String():        AF33,
			interface{}(AF41).(fmt.Stringer).String():        AF41,
			interface{}(AF42).(fmt.Stringer).String():        AF42,
			interface{}(AF43).(fmt.Stringer).String():        AF43,
			interface{}(EF).(fmt.Stringer).String():          EF,
			interface{}(Lowdelay).(fmt.Stringer).String():    Lowdelay,
			interface{}(Throughput).(fmt.Stringer).String():  Throughput,
			interface{}(Reliability).(fmt.Stringer).String(): Reliability,
			interface{}(Lowcost).(fmt.Stringer).String():     Lowcost,
		}
	}
}

// MarshalJSON is generated so ToS satisfies json.Marshaler.
func (r ToS) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ToSValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ToS: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ToS satisfies json.Unmarshaler.
func (r *ToS) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ToS should be a string, got %s", data)
	}
	v, ok := _ToSNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ToS %q", s)
	}
	*r = v
	return nil
}
